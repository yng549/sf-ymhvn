public class TriggerHandlerInventoryTransactionItems {
    
    public static void onAfterInsert(List<Inventory_Transaction_Item__c> lstInventoryTransactionItem) {
        Set<Id> setIdHeader = new Set<Id>();
        for(Inventory_Transaction_Item__c item : lstInventoryTransactionItem) {
            if(String.isNotBlank(item.Inventory_Transaction_Header__c)
               	&& item.Quantity__c != Null 
               	&& String.isNotBlank(item.Product__c)) {
                setIdHeader.add(item.Inventory_Transaction_Header__c);
            }
        }
        System.debug('setIdHeader' + setIdHeader);
        if(!setIdHeader.isEmpty()) {
            checkTranstionItemWithProduct(setIdHeader);
        }
    }
    
    //Nếu trùng product thì cộng dồn quantity lên
    private static void checkTranstionItemWithProduct(Set<Id> setIdHeader) {
        Savepoint sp = Database.setSavepoint();
        Map<Id, Map<Id,Inventory_Transaction_Item__c>> mapHeaderWithItems = new Map<Id, Map<Id,Inventory_Transaction_Item__c>>();
        List<Inventory_Transaction_Item__c> lstTractionItemUpsert = new List<Inventory_Transaction_Item__c>();
        Map<Id, Inventory_Transaction_Item__c> mapInventoryItem = new Map<Id, Inventory_Transaction_Item__c>();
        try {
            List<Inventory_Transaction_Item__c> lstTransactionItem = [SELECT Id
                                                                            , Product__c
                                                                            , Quantity__c
                                                                            , Product__r.RecordTypeId
                                                                      		, Is_Merg__c 
                                                                      		, Inventory_Transaction_Header__c
                                                                     FROM Inventory_Transaction_Item__c 
                                                                     WHERE Inventory_Transaction_Header__c IN: setIdHeader];
            System.debug('lstTransactionItem:' + lstTransactionItem.size());
            for(Inventory_Transaction_Item__c item : lstTransactionItem) {
                if (mapHeaderWithItems.containsKey(item.Inventory_Transaction_Header__c)) {
                    if (!mapHeaderWithItems.get(item.Inventory_Transaction_Header__c).containsKey(item.Product__c)) {
                        mapHeaderWithItems.get(item.Inventory_Transaction_Header__c).put(item.Product__c, item);
                    } else {
						mapHeaderWithItems.get(item.Inventory_Transaction_Header__c).get(item.Product__c).Quantity__c = 
                            mapHeaderWithItems.get(item.Inventory_Transaction_Header__c).get(item.Product__c).Quantity__c + item.Quantity__c;
                        	mapInventoryItem.put(mapHeaderWithItems.get(item.Inventory_Transaction_Header__c).get(item.Product__c).Id
                                        , mapHeaderWithItems.get(item.Inventory_Transaction_Header__c).get(item.Product__c));
                        	item.Quantity__c = 0;
                        	item.Is_Merg__c = true;
                        	mapInventoryItem.put(item.id, item);
                    }
                    continue;
                }
                mapHeaderWithItems.put(item.Inventory_Transaction_Header__c, new Map<Id, Inventory_Transaction_Item__c> { item.Product__c => item});
            }
            System.debug('lstTractionItemUpsert:' + lstTractionItemUpsert);
            if(!mapInventoryItem.values().isEmpty()) {
                for(Inventory_Transaction_Item__c item : mapInventoryItem.values()) {
                    System.debug('item:'+ item);
                }
                update mapInventoryItem.values();
            }
        } catch(Exception ex) {
            Database.rollback(sp);
             System.debug('ex:' + ex.getMessage() + ' ' + ex.getLineNumber());
        }
    }
    
	public static void onBeforeInsert(List<Inventory_Transaction_Item__c> lstInventoryTransactionItem) {
        List<Inventory_Transaction_Item__c> lstReserved = new List<Inventory_Transaction_Item__c>();
        Set<Id> setIdWarehouseInventoryFrom = new Set<Id>();
        for(Inventory_Transaction_Item__c item : lstInventoryTransactionItem) {
            if((item.From_Warehouse_Location__c != Null && item.To_Warehouse_Location__c != Null) || (item.From_Warehouse_Location__c != Null)) {
                lstReserved.add(item);
                if(item.From_Warehouse_Location__c != Null) {
                    setIdWarehouseInventoryFrom.add(item.From_Warehouse_Location__c);
                }
            }
        }
        if(!lstReserved.isEmpty()) {
            updateQuantityOnWarehouseWhenReserved(lstReserved, setIdWarehouseInventoryFrom);
        }
    }
    
    
    private static void updateQuantityOnWarehouseWhenReserved(List<Inventory_Transaction_Item__c> lstReserved, Set<Id> setIdWarehouseInventoryFrom) {
        List<Warehouse_Inventory__c> lstWarehouseInventoryFrom = new List<Warehouse_Inventory__c>();
        Map<Id, Warehouse_Inventory__c> mapProductWithWarehouse = new Map<Id, Warehouse_Inventory__c>();
        List<Warehouse_Inventory__c> lstWarehouseInventoryUpdate = new List<Warehouse_Inventory__c>();
        /*List<Inventory_Transaction_Item__c> lstReservedQuerry = [SELECT Id
                                                                 	, From_Warehouse_Location__c
                                                                 	, To_Warehouse_Location__c
                                                                 	, Quantity__c
                                                                 	, Inventory_Transaction_Header__c
                                                                 	, Inventory_Transaction_Header__r.Order_Reserved__c
                                                                 	, Product__c
                                                                 	, Product__r.Name
                                                                 	, Warehouse_Inventory__c
                                                                FROM Inventory_Transaction_Item__c
                                                                WHERE Id IN: lstReserved];*/
        if(!setIdWarehouseInventoryFrom.isEmpty()) {
			lstWarehouseInventoryFrom = [SELECT Id
                                             , QoH__c
                                             , Product__c
                                             , Product__r.Name
                                         	 , Warehouse_Location__c
                                            FROM Warehouse_Inventory__c
                                            WHERE Warehouse_Location__c IN: setIdWarehouseInventoryFrom];
            for(Warehouse_Inventory__c item : lstWarehouseInventoryFrom) {
                mapProductWithWarehouse.put(item.Product__c, item);
            }
        }
        for(Inventory_Transaction_Item__c item : lstReserved) {
            if(item.Inventory_Transaction_Header__r.Order_Reserved__c != Null && item.From_Warehouse_Location__c != Null) {
                if(mapProductWithWarehouse.containsKey(item.Product__c)) {
                    if(item.To_Warehouse_Location__c == Null) {
                        item.Warehouse_Inventory__c = mapProductWithWarehouse.get(item.Product__c).Id;
                    }
                    if(mapProductWithWarehouse.get(item.Product__c).QoH__c > item.Quantity__c) {
                        mapProductWithWarehouse.get(item.Product__c).QoH__c = mapProductWithWarehouse.get(item.Product__c).QoH__c - item.Quantity__c;
                        lstWarehouseInventoryUpdate.add(mapProductWithWarehouse.get(item.Product__c));
                    } else if(mapProductWithWarehouse.get(item.Product__c).QoH__c < item.Quantity__c) {
                        item.addError('Quantity is not enough for product ' + item.Product__r.Name);
                    }
                }
            }
        }
        if(!lstWarehouseInventoryUpdate.isEmpty()) {
            update lstReserved;
            update lstWarehouseInventoryUpdate;
        }
    }
    Public static void cheatTemp() {
        String a = 'cheat';
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
          a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
          a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
                a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
          a = a;
             a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
      }
}