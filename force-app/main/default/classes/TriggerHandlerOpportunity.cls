public without sharing class TriggerHandlerOpportunity {
  	public static Boolean flag = false;
    
    public static void onBeforeInsert(List<Opportunity> newData, Integer size) {
        autoSetRecordType(newData);
    }
    public static void onBeforeUpdate(Map<Id, Opportunity> mapOld, Map<Id, Opportunity> mapNew) {
        Map<Id, Opportunity> mapOpptyFinance = new Map<Id, Opportunity>();
        for(Opportunity item : mapNew.values()) {
            if(mapOld?.get(item.Id)?.StageName != item.StageName 
               && item.StageName == 'Closed Won'
               && item.Close_Opty_Date__c == NULL) {
                item.Close_Opty_Date__c = Date.today();
            }
            if(mapOld?.get(item.Id)?.StageName != item.StageName 
               && (item.StageName == 'Deposit' || item.StageName == 'Contract')
               && !mapOld?.get(item.Id)?.Buy_PCA__c) {
                item.Buy_PCA__c = true;
            }
            if(mapOld?.get(item.Id)?.Amount != item.Amount 
               || mapOld?.get(item.Id)?.Down_payment__c != item.Down_payment__c
              	|| mapOld?.get(item.Id)?.Loan_insurrance_rate__c != item.Loan_insurrance_rate__c
               || mapOld?.get(item.Id)?.Loan_period__c != item.Loan_period__c) {
                mapOpptyFinance.put(item.Id, item);
            }
        }
        if(!mapOpptyFinance.values().isEmpty()) {
            updateFieldAmountFinance(mapOpptyFinance);
        }
    }
    
    private static void updateFieldAmountFinance(Map<Id, Opportunity> mapOpptyFinance) {
        Savepoint sp = Database.setSavepoint();
        try {
            for(Opportunity item : mapOpptyFinance.values()) {
				double amount = double.valueof(item.Loan_amount__c);
                double Rate = double.valueof(item.Monthly_Interest_Rate__c);
                double period = double.valueof(item.Loan_period__c);
                double result1= math.pow(1+(Rate/100),period);
                double xResult1= (result1*(Rate/100));
                double result2= (math.pow((1+(Rate/100)),period)-1);
                double finalResult1 = (amount*(xResult1/result2));
                double totalPaymentDone = finalResult1*period;
                double interestPaymentDone  = totalPaymentDone - amount;
                double interestPaymentMonthly  = interestPaymentDone/period;
                double originPaymentMonthly  = finalResult1 - interestPaymentMonthly;
                item.Monthly_principal_payment__c  = originPaymentMonthly;
                item.Total_monthly_payment__c = finalResult1 + 12000;
                item.Total_interest_amount__c = interestPaymentDone;
                item.Total_loan_amount__c = (item.Amount == NULL ? 0 : item.Amount) - item.Down_payment__c + (item.Loan_insurrance_rate__c/100  *(item.Amount - item.Down_payment__c) * item.Loan_period__c);
                System.debug('item.Total_loan_amount__c: ' + item.Total_loan_amount__c);
            }
        } catch(Exception ex) {
             Database.rollback(sp);
             mapOpptyFinance.values().get(0).addError(ex.getMessage() + ' ' + ex.getLineNumber());
        }
    }
    
    public static void onAfterUpdate(Map<Id, Opportunity> mapOld, Map<Id, Opportunity> mapNew) {
        optyConditionCalculatePrice(mapOld, mapNew);
        createOrder(mapNew, mapOld);
    }
    
    static void autoSetRecordType(List<Opportunity> newData) {
        for (Opportunity data : newData) {
            if (String.isNotBlank(data.Lead_Type__c)) {
                if (data.Lead_Type__c == 'Bike') {
                    data.RecordTypeId = RecordTypeHelper.OPPORTUNITY_BIKE;
                } else if (data.Lead_Type__c == 'PCA') {
                    data.RecordTypeId = RecordTypeHelper.OPPORTUNITY_PCA;
                }
            }
        }
    }
    
    public static void createOrder(Map<Id, Opportunity> newRecordsMap,  Map<Id, Opportunity> oldRecordsMap) {
        try {
            List<Opportunity> listOptyCreateOrder = new List<Opportunity>();
            List<String> listSyncedQuoteId = new List<String>();
            PriceBook2 pricebook = [SELECT Id,Type__c,From__c,To__c FROM PriceBook2
                                                 WHERE Type__c = 'Bike' AND From__c <=: Date.today() AND To__c >=: Date.today() AND IsActive = true];
            for (Id key : newRecordsMap.keySet()) {
                Opportunity opty = (Opportunity) newRecordsMap.get(key);
                Opportunity oldOpty = (Opportunity) oldRecordsMap.get(key);
                if(opty.StageName != oldOpty.StageName && opty.StageName == 'Contract') {
                    listOptyCreateOrder.add(opty);
                    listSyncedQuoteId.add(opty.SyncedQuoteId);
                }
            }
            if(listOptyCreateOrder.isEmpty()) return;
            
            Map<String, Schema.SObjectField> optyFieldMap = Opportunity.sObjectType.getDescribe().fields.getMap();
            List<string> optySelectFields = new List<String>(optyFieldMap.keySet());
            optySelectFields.add('Owner.AccountId');
            String optySoql = 'SELECT ' + String.join(optySelectFields, ',');
            optySoql += ' FROM Opportunity';
            optySoql += ' WHERE Id in: listOptyCreateOrder '; 
            List<Opportunity> listOptyQuery = Database.query(optySoql); 
            
            
            
            Map<String, Schema.SObjectField> optyItemFieldMap = OpportunityLineItem.sObjectType.getDescribe().fields.getMap();
            List<string> optyItemSelectFields = new List<String>(optyItemFieldMap.keySet()); 
            String optyItemSoql = 'SELECT ' + String.join(optyItemSelectFields, ',');
            optyItemSoql += ' FROM OpportunityLineItem';
            optyItemSoql += ' WHERE OpportunityId in: listOptyQuery '; 
            List<OpportunityLineItem> listItem = Database.query(optyItemSoql); 
            Map<String, List<OpportunityLineItem>> mapItem = new Map<String, List<OpportunityLineItem>>();
            for(OpportunityLineItem item : listItem){
                if(!mapItem.containsKey(item.OpportunityId)){
                    mapItem.put(item.OpportunityId, new List<OpportunityLineItem>());
                }
                mapItem.get(item.OpportunityId).add(item);
            }
            
            Map<String, Schema.SObjectField> quoteFieldMap = Quote.sObjectType.getDescribe().fields.getMap();
            List<string> quoteSelectFields = new List<String>(quoteFieldMap.keySet());                
            String quoteSoql = 'SELECT ' + String.join(quoteSelectFields, ',');
            quoteSoql += ' FROM Quote';
            quoteSoql += ' WHERE Id in: listSyncedQuoteId '; 
            List<Quote> listQuote = Database.query(quoteSoql); 
            Map<String, Quote> mapQuote = new Map<String, Quote>();
            for(Quote item : listQuote){
                mapQuote.put(item.OpportunityId,item);
            }
            
            Map<String, Schema.SObjectField> promoFieldMap = Object_Promotion__c.sObjectType.getDescribe().fields.getMap();
            List<string> promoSelectFields = new List<String>(promoFieldMap.keySet());                
            String promoSoql = 'SELECT ' + String.join(promoSelectFields, ',');
            promoSoql += ' FROM Object_Promotion__c';
            promoSoql += ' WHERE Opportunity__c in: listOptyQuery '; 
            List<Object_Promotion__c> listPromo = Database.query(promoSoql); 
            Map<String, List<Object_Promotion__c>> mapPromo = new Map<String, List<Object_Promotion__c>>();
            for(Object_Promotion__c item : listPromo){
                if(!mapPromo.containsKey(item.Opportunity__c)){
                    mapPromo.put(item.Opportunity__c, new List<Object_Promotion__c>());
                }
                mapPromo.get(item.Opportunity__c).add(item);
            }
            
            Map<String, Schema.SObjectField> paymentFieldMap = Payment__c.sObjectType.getDescribe().fields.getMap();
            List<string> paymentSelectFields = new List<String>(paymentFieldMap.keySet());                
            String paymentSoql = 'SELECT ' + String.join(paymentSelectFields, ',');
            paymentSoql += ' FROM Payment__c';
            paymentSoql += ' WHERE Opportunity__c in: listOptyQuery '; 
            List<Payment__c> listPayment = Database.query(paymentSoql); 
            Map<String, List<Payment__c>> mapPayment = new Map<String, List<Payment__c>>();
            for(Payment__c item : listPayment){
                if(!mapPayment.containsKey(item.Opportunity__c)){
                    mapPayment.put(item.Opportunity__c, new List<Payment__c>());
                }
                mapPayment.get(item.Opportunity__c).add(item);
            }
            
            List<Order> listNewOrder = new List<Order>();
            List<Contract> listNewContract = new List<Contract>();
            List<OrderItem> listNewQuoteItem = new List<OrderItem>();
            List<Object_Promotion__c> listUpdatePromo = new List<Object_Promotion__c>();
            List<Payment__c> listUpdatePayment = new List<Payment__c>();
            
            for(Opportunity opty : listOptyQuery) {
                Quote currentQuote = mapQuote.get(opty.Id);
                
                DateTime today = DateTime.now();
                String formattedToday = today.formatGMT('ddMMyyyy');
                
                Order o = new Order();
                o.RecordTypeId = RecordTypeHelper.ORDER_BIKE;
                o.Name = formattedToday ;
                o.Pricebook2Id = pricebook.Id;
                o.OpportunityId = opty.Id;
                o.OwnerId = opty.OwnerId;
                o.AccountId = opty.AccountId;
                o.Status = 'New';
                o.EffectiveDate = Date.today();
                o.DO_DL__c = opty.Owner.AccountId;
                if(String.isNotBlank(opty.ContractId)) o.ContractId = opty.ContractId;
                
                if(currentQuote.Delivery_Date__c != Null) o.Delivery_Date__c = currentQuote.Delivery_Date__c;
                o.Product__c = opty.Product__c;
                listNewOrder.add(o);  
                
                Contract c = new Contract();
                c.AccountId = opty.AccountId;
                c.Opportunity__c = opty.Id;
                c.Pricebook2Id = pricebook.Id;
                c.Status = 'Draft';
                c.Payment_1__c = currentQuote.Payment_1__c;
                c.Payment_2__c = currentQuote.Payment_2__c;
                c.Payment_3__c = currentQuote.Payment_3__c;
                listNewContract.add(c);
            }  
            
            List<Opportunity> lstOpportunityUpdate = new List<Opportunity>();
            if(!listNewOrder.isEmpty()) {
                insert listNewOrder;
                
                for(Order o : listNewOrder) {               
                    if(mapItem.containsKey(o.OpportunityId)) {
                        for(OpportunityLineItem item : mapItem.get(o.OpportunityId)) {
                            OrderItem oi = new OrderItem();
                            oi.OrderId = o.Id;
                            oi.Quantity = item.Quantity;
                            oi.UnitPrice = item.UnitPrice;
                            oi.Product2Id = item.Product2Id;
                            oi.PricebookEntryId = item.PricebookEntryId;
                            listNewQuoteItem.add(oi);
                        }
                        lstOpportunityUpdate.add(new Opportunity(Id = o.OpportunityId, Order__c = o.Id));
                    }
                    
                    
                    if(mapPromo.containsKey(o.OpportunityId)) {
                        List<Object_Promotion__c> currentListPromo = mapPromo.get(o.OpportunityId);
                        for(Object_Promotion__c promo : currentListPromo) {
                            promo.Order__c = o.Id;
                            listUpdatePromo.add(promo);
                        }
                    }   
                    
                    if(mapPayment.containsKey(o.OpportunityId)) {
                        List<Payment__c> currentListPayment = mapPayment.get(o.OpportunityId);
                        for(Payment__c payment : currentListPayment) {
                            payment.Order__c = o.Id;
                            listUpdatePayment.add(payment);
                        }
                    }
                }
                
                if(!listNewQuoteItem.isEmpty()) insert listNewQuoteItem;
                
                if(!listNewContract.isEmpty()) insert listNewContract;       
                
                if(!listUpdatePromo.isEmpty()) update listUpdatePromo;
                
                if(!listUpdatePayment.isEmpty()) update listUpdatePayment;
            }   
            for(Contract ItemCon: listNewContract){
                for(Opportunity ItemOpp: lstOpportunityUpdate) {
                    if(ItemCon.Opportunity__c == ItemOpp.Id) ItemOpp.ContractId = ItemCon.Id;
                }
            }
            update lstOpportunityUpdate;
        } catch(Exception ex) {
            newRecordsMap.values()[0].addError(ex.getMessage() + ' ' + ex.getLineNumber());
        }
    }
    
    private static void optyConditionCalculatePrice(Map<Id, Opportunity> mapOld, Map<Id, Opportunity> mapNew) {
        Set<Id> optyIds = new Set<Id>();
        Set<Id> syncedQuoteIds = new Set<Id>();
        for (Opportunity data : mapNew.values()) {
            if (data.RecordTypeId == RecordTypeHelper.OPPORTUNITY_BIKE) {
                if (data.SyncedQuoteId != null) {
                    if (mapOld != null) {
                        if ( (data.Province__c != mapOld.get(data.Id).Province__c ||
                             data.District__c != mapOld.get(data.Id).District__c) ||
                            data.Ownership_Tax__c == null ||
                            data.Account.Province__c !=
                            mapOld.get(data.Id).Account.Province__c ||
                            data.Account.District__c !=
                            mapOld.get(data.Id).Account.District__c ||
                            data.Account.Province__r.Ownership_Tax__c !=
                            mapOld.get(data.Id).Account.Province__r.Ownership_Tax__c ||
                            data.Account.District__r.Ownership_Tax__c !=
                            mapOld.get(data.Id).Account.District__r.Ownership_Tax__c ||
                            data.Number_Plate_Fee__c == null ||
                            data.Account.Province__r.Number_Plate_Fee__c !=
                            mapOld.get(data.Id).Account.Province__r.Number_Plate_Fee__c ||
                            data.Account.District__r.Number_Plate_Fee__c !=
                            mapOld.get(data.Id).Account.District__r.Number_Plate_Fee__c
                        ) {
                            optyIds.add(data.Id);
                            syncedQuoteIds.add(data.SyncedQuoteId);
                        }
                    }
                }
            }
        }
        if (!optyIds.isEmpty()) {
            optyCalculatePrice(optyIds, syncedQuoteIds);
        }
    }
    
    //   @future
    private static void optyCalculatePrice(Set<Id> optyIds, Set<Id> syncedQuoteIds) {
        
        
        Map<Id, QuoteLineItem> mapQuoteLineItem = new Map<Id, QuoteLineItem>();
        
        for (QuoteLineItem q : [SELECT Id, ListPrice, UnitPrice, QuoteId
                                FROM QuoteLineItem
                                WHERE QuoteId IN :syncedQuoteIds]) {
            mapQuoteLineItem.put(q.QuoteId, q);
        }
        
        Map<Id, Opportunity> mapUpdate = new Map<Id, Opportunity>();
        for (Opportunity o : [SELECT Id, SyncedQuoteId, Ownership_Tax__c, Number_Plate_Fee__c,
                              Account.Province__r.Number_Plate_Fee__c, Account.Province__r.Ownership_Tax__c,
                              Account.District__r.Number_Plate_Fee__c, Account.District__r.Ownership_Tax__c
                              FROM Opportunity
                              WHERE Id IN :optyIds]) {
            if (mapQuoteLineItem.get(o.SyncedQuoteId).ListPrice != null) {
                if (o.Account.District__r.Ownership_Tax__c != null) {
                    o.Ownership_Tax__c =
                        mapQuoteLineItem.get(o.SyncedQuoteId).ListPrice *
                        ((Decimal) o.Account.District__r.Ownership_Tax__c / (Decimal) 100);
                } else {
                    o.Ownership_Tax__c =
                        mapQuoteLineItem.get(o.SyncedQuoteId).ListPrice *
                        ((Decimal) (o.Account.Province__r.Ownership_Tax__c != null
                                    ? o.Account.Province__r.Ownership_Tax__c
                                    : 2) / (Decimal) 100);
                }
                if (o.Account.District__r.Number_Plate_Fee__c != null) {
                    o.Number_Plate_Fee__c = o.Account.District__r.Number_Plate_Fee__c;
                } else {
                    o.Number_Plate_Fee__c = (o.Account.Province__r.Number_Plate_Fee__c !=
                                             null
                                             ? o.Account.Province__r.Number_Plate_Fee__c
                                             : 50000);
                }
                mapUpdate.put(o.Id, o);
            }
        }
        
        // syncedQuote is read only in salesforce ==> new query without syncedquote and update
        List<Opportunity> oppsUpdate = new List<Opportunity>();
        for (Opportunity o : [SELECT Id, Ownership_Tax__c, Number_Plate_Fee__c
                              FROM Opportunity
                              WHERE Id IN :mapUpdate.keySet()]) {
            o.Ownership_Tax__c = mapUpdate.get(o.Id).Ownership_Tax__c;
            o.Number_Plate_Fee__c = mapUpdate.get(o.Id).Number_Plate_Fee__c;
            oppsUpdate.add(o);
        }
        if(!oppsUpdate.isEmpty()) {
            update oppsUpdate;
        }
    }
    
    Public static void cheatTemp() {
        String a = 'cheat';
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
         a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a; 
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
        a = a;
    }
}